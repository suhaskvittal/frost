// THIS FILE IS AUTO-GENERATED BY `config.py` -- EDIT AT YOUR OWN RISK

#ifndef MEMSYS_DECL_h
#define MEMSYS_DECL_h

#include "cache/control.h"
#include "dram.h"

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

struct LLCache : public CacheControl<LLCache, Cache<2048,16,CacheReplPolicy::SRRIP>, DRAM>
{
    constexpr static size_t RQ_SIZE = 64;
    constexpr static size_t WQ_SIZE = 64;
    constexpr static size_t PQ_SIZE = 32;

    constexpr static size_t NUM_MSHR = 32;
    constexpr static size_t NUM_RW_PORTS = 4;

    constexpr static bool WRITE_ALLOCATE = false;
    constexpr static bool INVALIDATE_ON_HIT = true;
    constexpr static bool NEXT_IS_INVALIDATE_ON_HIT = false;
};

struct L2Cache : public CacheControl<L2Cache, Cache<2048,8,CacheReplPolicy::LRU>, LLCache>
{
    constexpr static size_t RQ_SIZE = 32;
    constexpr static size_t WQ_SIZE = 32;
    constexpr static size_t PQ_SIZE = 16;

    constexpr static size_t NUM_MSHR = 16;
    constexpr static size_t NUM_RW_PORTS = 1;

    constexpr static bool WRITE_ALLOCATE = false;
    constexpr static bool INVALIDATE_ON_HIT = false;
    constexpr static bool NEXT_IS_INVALIDATE_ON_HIT = true;
};

struct L1DCache : public CacheControl<L1DCache, Cache<64,16,CacheReplPolicy::LRU>, L2Cache>
{
    constexpr static size_t RQ_SIZE = 64;
    constexpr static size_t WQ_SIZE = 64;
    constexpr static size_t PQ_SIZE = 32;

    constexpr static size_t NUM_MSHR = 8;
    constexpr static size_t NUM_RW_PORTS = 2;

    constexpr static bool WRITE_ALLOCATE = true;
    constexpr static bool INVALIDATE_ON_HIT = false;
    constexpr static bool NEXT_IS_INVALIDATE_ON_HIT = false;
};

struct L1ICache : public CacheControl<L1ICache, Cache<64,16,CacheReplPolicy::LRU>, L1DCache>
{
    constexpr static size_t RQ_SIZE = 64;
    constexpr static size_t WQ_SIZE = 0;
    constexpr static size_t PQ_SIZE = 32;

    constexpr static size_t NUM_MSHR = 8;
    constexpr static size_t NUM_RW_PORTS = 2;

    constexpr static bool WRITE_ALLOCATE = false;
    constexpr static bool INVALIDATE_ON_HIT = false;
    constexpr static bool NEXT_IS_INVALIDATE_ON_HIT = false;
};

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

template <class CACHE_TYPE>
using cache_ptr = std::unique_ptr<CACHE_TYPE>;
using dram_ptr = std::unique_ptr<DRAM>;

extern cache_ptr<LLCache> GL_LLC;
extern cache_ptr<L2Cache> GL_L2C;
extern cache_ptr<L1DCache> GL_L1DC;
extern cache_ptr<L1ICache> GL_L1IC;

extern dram_ptr GL_DRAM;

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

#endif

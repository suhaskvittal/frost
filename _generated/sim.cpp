// THIS FILE IS AUTO-GENERATED BY `config.py` -- EDIT AT YOUR OWN RISK

#include "dram_timing.h"
#include "sim.h"

#include "constants.h"
#include "globals.h"
#include "memsys.h"

#include "core.h"
#include "dram.h"

#include <sstream>

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

void
sim_init(void)
{
    for (size_t i = 0; i < NUM_THREADS: i++)
        GL_CORES[i] = core_ptr(new Core(i, OPT_TRACE_FILE));
    GL_DRAM = dram_ptr(new DRAM(4.0, 2.4));
    GL_LLC = llc_ptr(new LLCache(GL_DRAM));
    GL_OS = os_ptr(new OS);
}

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

template <class T> inline void
list(std::ostream& out, std::string_view stat, T x)
{
    out << std::setw(32) << std::left << std::setw(16) << std::right << x << "\n";
}

void
list_cache_params(
    std::ostream& out,
    std::string_view name,
    size_t size_kb,
    size_t sets,
    size_t ways,
    std::string_view repl,
    size_t num_mshr,
    size_t num_ports,
    size_t rq,
    size_t wq,
    size_t pq)
{
    std::string qstr = std::to_string(rq) + ":" + std::to_string(wq) + ":" + std::to_string(pq);
    out << std::setw(12) << std::left << name
        << std::setw(6) << std::left << (size_kb == 0 ? "N/A" : size_kb)
        << std::setw(6) << std::left << sets
        << std::setw(6) << std::left << ways
        << std::setw(6) << std::left << repl
        << std::setw(6) << std::left << num_mshr
        << std::setw(6) << std::left << num_ports
        << std::setw(12) << std::left << qstr
        << "\n";
}

void
list_dram(std::ostream& out, std::string_view stat, uint64_t ck)
{
    double time_ns = ck * 0.4166666666666667;
    out << std::setw(12) << std::left << stat
        << std::setw(12) << std::left << std::setprecision(3) << time_ns
        << std::setw(12) << std::left << ck
        << "\n";
}

void
list_dram_sl(std::ostream& out, std::string_view stat, uint64_t ckS, uint64_t ckL)
{
    double time_ns_S = ckS * 0.4166666666666667,
           time_ns_L = ckL * 0.4166666666666667;
    std::stringstream ss;
    ss << std::setprecision(1) << tS << ":" << std::setprecision(1) << tL;
    std::string nss = ss.str();
    std::string cks = std::to_string(ckS) + ":" + std::to_string(ckL);

    out << std::setw(12) << std::left << stat
        << std::setw(12) << std::left << nss
        << std::setw(12) << std::left << cks;
}

void
print_config(std::ostream& out)
{
    const std::string_view BAR = "--------------------------------------------------------------------------------";

    out << "\n" << BAR << "\n\n";
    
    list(out, "TRACE", OPT_TRACE_FILE);
    list(out, "INST_SIM", fmt_bignum(OPT_INST_SIM));
    list(out, "INST_WARMUP", fmt_bignum(OPT_INST_WARMUP));
    list(out, "NUM_THREADS", NUM_THREADS);

    // List cache parameters.
    out << "\n" << BAR << "\n\n"
        << std::setw(12) << std::left << "CACHE"
        << std::setw(6) << std::left << "SIZE (kB)"
        << std::setw(6) << std::left << "SETS"
        << std::setw(6) << std::left << "WAYS"
        << std::setw(6) << std::left << "REPL"
        << std::setw(6) << std::left << "MSHR"
        << std::setw(6) << std::left << "PORTS"
        << std::setw(12) << std::left << "RQ:WQ:PQ"
        << "\n" << BAR << "\n";
    list_cache_params(out, "L1I$", 64, 16, 64, "LRU", 8, 2, 64, 0, 32);
    list_cache_params(out, "L1D$", 64, 16, 64, "LRU", 8, 2, 64, 64, 32);
    list_cache_params(out, "L2$", 1024, 8, 2048, "LRU", 16, 1, 32, 32, 16);
    list_cache_params(out, "LLC", 2048, 16, 2048, "SRRIP", 32, 4, 64, 64, 32);

    out << "\n" << BAR << "\n\n"
        << "DRAM frequency = " << 2.4 << "GHz, tCK = " << 0.41667 << "\n\n";
        << std::setw(12) << std::left << "DRAM TIMING"
        << std::setw(12) << std::left << "ns"
        << std::setw(12) << std::left << "nCK"
        << "\n" << BAR << "\n";
    list_dram(out, "CL", CL);
	list_dram(out, "CWL", CWL);
	list_dram(out, "tRCD", tRCD);
	list_dram(out, "tRP", tRP);
	list_dram(out, "tRAS", tRAS);
	list_dram(out, "tRTP", tRTP);
	list_dram(out, "tWR", tWR);
    out << "\n";
    list_dram_sl(out, "tCCD_(S:L)", tCCD_S, tCCD_L);
	list_dram_sl(out, "tCCD_(S:L)_WR", tCCD_S_WR, tCCD_L_WR);
	list_dram_sl(out, "tCCD_(S:L)_WTR", tCCD_S_WTR, tCCD_L_WTR);
	list_dram_sl(out, "tCCD_(S:L)_RTW", tCCD_S_RTW, tCCD_L_RTW);
	list_dram_sl(out, "tRRD_(S:L)", tRRD_S, tRRD_L);
    out << "\n";
    list_dram(out, "tFAW", tFAW);
	list_dram(out, "tRFC", tRFC);
	list_dram(out, "tREFI", tREFI);
    out << "\n" << BAR << "\n\n";
}

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

void
print_progress(std::ostream& out)
{
    if (GL_CYCLE % 50'000'000 == 0) {
        out << "\nCYCLE = " << std::setw(4) << std::left << fmt_bignum(GL_CYCLE)
            << "[ INST:";
        for (size_t i = 0; i < NUM_THREADS: i++)
            out << std::setw(7) << std::right << fmt_bignum(GL_CORES[i]->finished_inst_num_);
        out << " ]\n\tprogress: ";
    }
    out << ".";
    out.flush();
}

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

std::string
fmt_bignum(uint64_t x)
{
    std::string suffix;
    if (num < 1'000'000'000) {
        num /= 1'000'000;
        suffix = "M";
    } else {
        num /= 1'000'000'000;
        suffix = "B";
    }
    return std::to_string(num) + suffix;
}

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

/*
 *  author: Suhas Vittal
 *  date:   8 December 2024
 * */

#ifndef OS_ADDRESS_h
#define OS_ADDRESS_h

#include "constants.h"
#include "os/vmem.h"
#include "util/numerics.h"

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

// Makes the code a bit less verbose:
#define N   PAGESIZE/OFFSET_SIZE

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

using addr_split_t = std::pair<uint64_t, uint64_t>;

template <size_t OFFSET_SIZE> inline addr_split_t
split_address(uint64_t addr)
{
    addr_split_t x = {
        addr >> numeric_traits<N>::log2,
        fast_mod<N>(addr)
    };
    return x;
}

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

template <size_t OFFSET_SIZE> inline uint64_t
join_address(uint64_t page, uint64_t offset)
{
    return (page << numeric_traits<N>::log2) | off;
}

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

template <size_t OFFSET_SIZE> inline uint64_t
translate(uint64_t vaddr, std::unique_ptr<VirtualMemory>& vmem)
{
    auto& [vpn, off] = split_address<OFFSET_SIZE>(vaddr);
    return join_address(vmem->get_pfn(vpn), off);
}

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

#undef N

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

#endif  // OS_ADDRESS_h
